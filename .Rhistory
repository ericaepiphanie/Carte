library(readxl)
base<- read_excel("C:/Users/USER/Desktop/DOC_REGROUP/Ménages, vulnérables_Kaya.xlsx")
View(base)
summary(base)
attach(base)
print(table(base$S1Q1))
print(table(base$S1Q2))
print(table(base$S1Q3))
print(table(base$S1Q4))
print(table(base$S1Q4))
print(table(base$secteur_village))
print(table(base$S1Q5A))
print(table(base$S3Q3))
print(table(base$S3Q5))
print(table(base$S3Q11))
print(table(base$S3Q12))
print(table(base$S3Q12A))
print(table(base$s4q1))
print(table(base$S4Q1))
plot(ecdf(base$s5Q1))
print(table(base$S5Q1))
plot(ecdf(base$S5Q1))
summary(base$s5Q1)
summary(base$S5Q1)
library(readxl)
base<- read_excel("C:/Users/USER/Desktop/DOC_REGROUP/Ménages, vulnérables_Kaya.xlsx")
attach(base)
print(table(base$S1Q1))
print(table(base$S1Q2))
print(table(base$S1Q3))
print(table(base$S1Q4))
print(table(base$S3Q3))
print(table(base$S3Q11))
print(table(base$S4Q1))
print(table(base$S4Q2))
print(table(base$S4Q3))
print(table(base$S4Q4))
print(table(base$S4Q5))
print(table(base$S4Q6))
print(table(base$S4Q7))
print(table(base$S4Q8))
print(table(base$S4Q9))
print(table(base$S4Q10))
summary(base$S5Q1)
summary(base$S5Q2)
summary(base$S5Q3)
summary(base$S5Q5)
summary(base$S5Q8)
summary(base$S5Q11)
summary(base$S5Q12)
summary(base$S5Q14)
pie(table(base$statut_vulnerabilite))
print(table(base$statut_vulnerabilite))
pie(table(base$statut_vulnerabilite),col = blue)
pie(table(base$statut_vulnerabilite),col = c("purple", "violetred1"))
pie(table(base$statut_vulnerabilite),col = c("violetred1","purple"))
pie(table(base$statut_vulnerabilite),col = c("blue","purple"))
hist(table(base$S1Q1))
hist(base$S1Q1)
hist(print(table(base$S1Q1)))
print(table(base$S1Q1))
hist(print(table(base$S1Q3)))
print(table(base$S1Q1))
hist(print(table(base$S1Q3)))
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
Dargo_base <- read_excel("C:/Users/USER/Desktop/Recherche R_studio/Dargo_base.xlsx")
View(Dargo_base)
nrow(Dargo_base)
ncol(Dargo_base)
attach(Dargo_base)
S1Q9[1]
for(i in 1 : nrow(Dargo_base)){
repeat{
while(S1Q9[i] == S1Q9[i+1]){
taille=taille+1
if (S1Q9[i] != S1Q9[i+1]){taille=0}
}
}
}
for(i in 1 : nrow(Dargo_base)){
repeat{
while(S1Q9[i] == S1Q9[i+1]){
Dargo_base$taille=Dargo_base$taille+1
if (S1Q9[i] != S1Q9[i+1]){Dargo_base$taille=0}
}
}
}
for(i in 1 : nrow(Dargo_base)){
while(S1Q9[i] == S1Q9[i+1]){
Dargo_base$taille=Dargo_base$taille+1
if (S1Q9[i] != S1Q9[i+1]){Dargo_base$taille=0}
}
}
Dargo_base$taille=0
attach(Dargo_base)
install.packages("raster")
install.packages("ggmap")
install.packages("ggplot2")
knitr::opts_chunk$set(echo = TRUE)
#Importation du package
library(raster)
#Ensemble de la France
FranceFormes <- getData(name="GADM", country="BFA", level=1)
plot(FranceFormes, main="Carte du Burkina Faso")
names(BF_Formes)
#Ensemble de la France
BF_Formes <- getData(name="GADM", country="BFA", level=3)
names(BF_Formes)
install.packages("readxl")
library(readxl)
Nb_menage <- read_excel("C:/Users/USER/Desktop/Carte_BF avec R/Nb_menage.xlsx")
View(Nb_menage)
#Importation du package
library(raster)
#Importation d'une base sur les ménages vulnérables
library(readxl)
Nb_menage <- read_excel("C:/Users/USER/Desktop/Carte_BF avec R/Nb_menage.xlsx")
#Obtenir les formes
BF_Formes <- getData(name="GADM", country="BFA", level=3)
plot(BF_Formes, main="Carte du Burkina Faso")
names(BF_Formes)
#Établissement de l'index
idx <- match(BF_Formes$NAME_2, as.character(Nb_menage$Name))
#Tranfert des données pour une variable (le nombre de votants sur le nombre d'inscrits) en fonction de la règle de concordance
concordance <- Nb_menage[idx, "Nombre_menage"]
BF_Formes$Nombre_menage <- concordance
#Tracage de la carte
#établissemment de la charte des coupeurs puis tracage de la carte en utilisant
couleurs <- colorRampPalette(c('white', 'black'))
spplot(BF_Formes, "Nombre_menage",col.regions=couleurs(30),  main=list(label="Nombre de ménage BF",cex=.8))
#ccCarte12
#Importation du package
library(raster)
#Importation d'une base sur les ménages vulnérables
library(readxl)
Nb_menage <- read_excel("C:/Users/USER/Desktop/Carte_BF avec R/Nb_menage.xlsx")
#Obtenir les formes
BF_Formes <- getData(name="GADM", country="BFA", level=3)
plot(BF_Formes, main="Carte du Burkina Faso")
names(BF_Formes)
#Établissement de l'index
idx <- match(BF_Formes$NAME_2, as.character(Nb_menage$Name))
#Tranfert des données pour une variable (le nombre de votants sur le nombre d'inscrits) en fonction de la règle de concordance
concordance <- Nb_menage[idx, "Nombre_menage"]
BF_Formes$Nombre_menage <- concordance
#Tracage de la carte
#établissemment de la charte des coupeurs puis tracage de la carte en utilisant
couleurs <- colorRampPalette(c('white', 'black'))
spplot(BF_Formes, "Nombre_menage",col.regions=couleurs(30),  main=list(label="Nombre de ménage BF",cex=2))
#ccCarte12
#Importation du package
library(raster)
#Importation d'une base sur les ménages vulnérables
library(readxl)
Nb_menage <- read_excel("C:/Users/USER/Desktop/Carte_BF avec R/Nb_menage.xlsx")
#Obtenir les formes
BF_Formes <- getData(name="GADM", country="BFA", level=3)
plot(BF_Formes, main="Carte du Burkina Faso")
names(BF_Formes)
#Établissement de l'index
idx <- match(BF_Formes$NAME_2, as.character(Nb_menage$Name))
#Tranfert des données pour une variable (le nombre de votants sur le nombre d'inscrits) en fonction de la règle de concordance
concordance <- Nb_menage[idx, "Nombre_menage"]
BF_Formes$Nombre_menage <- concordance
#Tracage de la carte
#établissemment de la charte des coupeurs puis tracage de la carte en utilisant
couleurs <- colorRampPalette(c('white', 'black'))
spplot(BF_Formes, "Nombre_menage",col.regions=couleurs(300),  main=list(label="Nombre de ménage BF",cex=2))
#ccCarte12
#Importation du package
library(raster)
#Importation d'une base sur les ménages vulnérables
library(readxl)
Nb_menage <- read_excel("C:/Users/USER/Desktop/Carte_BF avec R/Nb_menage.xlsx")
#Obtenir les formes
BF_Formes <- getData(name="GADM", country="BFA", level=3)
plot(BF_Formes, main="Carte du Burkina Faso")
names(BF_Formes)
#Établissement de l'index
idx <- match(BF_Formes$NAME_3, as.character(Nb_menage$Name))
#Tranfert des données pour une variable (le nombre de votants sur le nombre d'inscrits) en fonction de la règle de concordance
concordance <- Nb_menage[idx, "Nombre_menage"]
BF_Formes$Nombre_menage <- concordance
#Tracage de la carte
#établissemment de la charte des coupeurs puis tracage de la carte en utilisant
couleurs <- colorRampPalette(c('white', 'black'))
spplot(BF_Formes, "Nombre_menage",col.regions=couleurs(30),  main=list(label="Nombre de ménage BF",cex=.8))
#ccCarte12
data(BF_Formes)
head(BF_Formes)
View(BF_Formes)
View(BF_Formes)
BF_Formes@data[["NAME_3"]]
legend("topleft",legend=BF_Formes$NAME_3,fill=couleurs,cex=1.3,bty="n" )
BF_Formes <- getData(name="GADM", country="BFA", level=1)
colors=rainbow(length(BF_Formes$NAME_1))
plot(BF_Formes, col=colors, main="Carte du Burkina Faso")
text(coordinates(BF_Formes), labels = BF_Formes$NAME_1,cex=0.4)
install.packages("latexpdf")
install.packages("latex2exp")
install.packages("tinytex")
install.packages("flexdashboard")
install.packages("pacman")
install.packages("rcdimple")
library(flexdashboard)
pacman:: p_load(flexdashboard,rcdimple,DT)
library(raster)
library(pacman)
library(readxl)
library(knitr)
library(dplyr)
Nb_menage <- read_excel("C:/Users/USER/Desktop/Carte_BF avec R/Nb_menage.xlsx")
#kable(Nb_menage, "html")
data=Nb_menage[-c(0),]
View(data)
#kable(Nb_menage, "html")
data=Nb_menage[,-c(0)]
View(data)
#kable(Nb_menage, "html")
data=Nb_menage[-c(,0),]
#kable(Nb_menage, "html")
data=Nb_menage(-c[,0],)
#kable(Nb_menage, "html")
data=Nb_menage[0,]
View(data)
#kable(Nb_menage, "html")
data=Nb_menage[,0]
View(data)
#kable(Nb_menage, "html")
data=Nb_menage[c(1:60),]
View(data)
plot(data~Name,data=data , type="h", col="blue")
data=Nb_menage[c(1:60),]
plot(data~Name,data=data , type="h", col="blue")
plot(data~Nombre_menage,data=data , type="h", col="blue")
hist(data$Nombre_menage,
col = c("orange"),
main = paste("Histogramme nbre menage vul"),
ylab = "Effectifs",
xlab = "commune")
barplot(data$Name, main="Répartition des menage vul",
xlab="ddd",
col="orange")
barplot(data$Nombre_menage, main="Répartition des menage vul",
xlab="ddd",
col="orange")
barplot(data$Nombre_menage, main="Répartition des menage vul",
xlab="ddd",
names.arg=True,
col="blue")
barplot(data$Nombre_menage, main="Répartition des menage vul",
xlab="ddd",
col="blue", args.legend = list(x = "topleft"))
barplot(data$Nombre_menage, main="Répartition des menage vul",
xlab="ddd",
col="blue", legend = rownames(data))
barplot(data$Nombre_menage, main="Répartition des menage vul",
xlab="ddd",
col="blue", legend = rownames(data$Name))
barplot(data$Nombre_menage, main="Répartition des menage vul",
xlab="ddd",
col=rainbow(99, start=.1), legend = rownames(data$Name))
install.packages("rpivotTable")
install.packages("openintro")
library(flexdashboard)
pacman:: p_load(flexdashboard,rcdimple,DT)
library(raster)
library(knitr)
library(rpivotTable)
library(ggplot2)
library(openintro)
library(DT)
library(pacman)
library(readxl)
library(knitr)
library(dplyr)
Nb_menage <- read_excel("C:/Users/USER/Desktop/Carte_BF avec R/Nb_menage.xlsx")
#kable(data, "html")
valueBox(data,icon = "fa-comments")
#kable(data, "html")
valueBox(42,icon = "fa-comments")
data=Nb_menage[c(1:60),]
#kable(data, "html")
DT::datatable(data@data[, c("Communes", "Nb_menag_vul")],
rownames = FALSE, options = list(pageLength = 10)
)
data=Nb_menage[c(1:60),]
#kable(data, "html")
DT::datatable(data[, c("Communes", "Nb_menag_vul")],
rownames = FALSE, options = list(pageLength = 10)
)
data=Nb_menage[c(1:60),]
#kable(data, "html")
DT::datatable(data[, c("Name", "Nombre_menage")],
rownames = FALSE, options = list(pageLength = 10)
)
#barplot(data$Nombre_menage, main="Répartition des menage vul",
#        xlab="ddd",
#       legend = rownames(data$Name))
BF_Formes <- getData(name="GADM", country="BFA", level=1)
colors=rainbow(length(BF_Formes$NAME_1))
plot(BF_Formes, col=colors, main="Carte du Burkina Faso")
text(coordinates(BF_Formes), labels = BF_Formes$NAME_1,cex=0.6)
ggplot(data = data, aes(x = data$Name)) + geom_histogram()
ggplot(data = data, aes(x = data$Nombre_menage)) + geom_histogram()
#barplot(data$Nombre_menage, main="Répartition des menage vul",
#        xlab="ddd",
#       legend = rownames(data$Name))
ggplot(data = data, aes(x = Nombre_menage)) + geom_histogram()
ggplot(data = data, aes(x = Nombre_menage), bins=30) + geom_histogram()
library(shiny)
library(ggplot2)  # for the diamonds dataset
ui <- fluidPage(
title = "Examples of DataTables",
sidebarLayout(
sidebarPanel(
conditionalPanel(
'input.dataset === "diamonds"',
checkboxGroupInput("show_vars", "Columns in diamonds to show:",
names(diamonds), selected = names(diamonds))
),
conditionalPanel(
'input.dataset === "mtcars"',
helpText("Click the column header to sort a column.")
),
conditionalPanel(
'input.dataset === "iris"',
helpText("Display 5 records by default.")
)
),
mainPanel(
tabsetPanel(
id = 'dataset',
tabPanel("diamonds", DT::dataTableOutput("mytable1")),
tabPanel("mtcars", DT::dataTableOutput("mytable2")),
tabPanel("iris", DT::dataTableOutput("mytable3"))
)
)
)
)
server <- function(input, output) {
# choose columns to display
diamonds2 = diamonds[sample(nrow(diamonds), 1000), ]
output$mytable1 <- DT::renderDataTable({
DT::datatable(diamonds2[, input$show_vars, drop = FALSE])
})
# sorted columns are colored now because CSS are attached to them
output$mytable2 <- DT::renderDataTable({
DT::datatable(mtcars, options = list(orderClasses = TRUE))
})
# customize the length drop-down menu; display 5 rows per page by default
output$mytable3 <- DT::renderDataTable({
DT::datatable(iris, options = list(lengthMenu = c(5, 30, 50), pageLength = 5))
})
}
shinyApp(ui, server)
runApp('C:/Users/USER/Desktop/Carte_BF avec R/shiny.R')
